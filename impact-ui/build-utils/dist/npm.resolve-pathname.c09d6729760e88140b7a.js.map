{"version":3,"sources":["webpack:///./node_modules/resolve-pathname/index.js"],"names":["isAbsolute","pathname","charAt","spliceOne","list","index","i","k","n","length","pop","__webpack_exports__","to","from","arguments","undefined","toParts","split","fromParts","isToAbs","isFromAbs","mustEndAbs","concat","hasTrailingSlash","last","up","part","unshift","result","join","substr"],"mappings":"4FAAA,SAAAA,EAAAC,GACA,YAAAA,EAAAC,OAAA,GAIA,SAAAC,EAAAC,EAAAC,GACA,QAAAC,EAAAD,EAAAE,EAAAD,EAAA,EAAAE,EAAAJ,EAAAK,OAAiDF,EAAAC,EAAOF,GAAA,EAAAC,GAAA,EACxDH,EAAAE,GAAAF,EAAAG,GAGAH,EAAAM,MA2DeC,EAAA,EAvDf,SAAAC,GACA,IAAAC,EAAAC,UAAAL,OAAA,QAAAM,IAAAD,UAAA,GAAAA,UAAA,MAEAE,EAAAJ,KAAAK,MAAA,SACAC,EAAAL,KAAAI,MAAA,SAEAE,EAAAP,GAAAZ,EAAAY,GACAQ,EAAAP,GAAAb,EAAAa,GACAQ,EAAAF,GAAAC,EAWA,GATAR,GAAAZ,EAAAY,GAEAM,EAAAF,EACGA,EAAAP,SAEHS,EAAAR,MACAQ,IAAAI,OAAAN,KAGAE,EAAAT,OAAA,UAEA,IAAAc,OAAA,EACA,GAAAL,EAAAT,OAAA,CACA,IAAAe,EAAAN,IAAAT,OAAA,GACAc,EAAA,MAAAC,GAAA,OAAAA,GAAA,KAAAA,OAEAD,GAAA,EAIA,IADA,IAAAE,EAAA,EACAnB,EAAAY,EAAAT,OAAgCH,GAAA,EAAQA,IAAA,CACxC,IAAAoB,EAAAR,EAAAZ,GAEA,MAAAoB,EACAvB,EAAAe,EAAAZ,GACK,OAAAoB,GACLvB,EAAAe,EAAAZ,GACAmB,KACKA,IACLtB,EAAAe,EAAAZ,GACAmB,KAIA,IAAAJ,EAAA,KAAyBI,IAAMA,EAC/BP,EAAAS,QAAA,OACGN,GAAA,KAAAH,EAAA,IAAAA,EAAA,IAAAlB,EAAAkB,EAAA,KAAAA,EAAAS,QAAA,IAEH,IAAAC,EAAAV,EAAAW,KAAA,KAIA,OAFAN,GAAA,MAAAK,EAAAE,QAAA,KAAAF,GAAA,KAEAA","file":"npm.resolve-pathname.c09d6729760e88140b7a.js","sourcesContent":["function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash = void 0;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift('..');\n  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\nexport default resolvePathname;"],"sourceRoot":""}