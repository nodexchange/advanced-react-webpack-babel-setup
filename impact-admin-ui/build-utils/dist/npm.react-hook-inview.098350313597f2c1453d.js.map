{"version":3,"sources":["webpack:///./node_modules/react-hook-inview/dist/index.js"],"names":["Object","defineProperty","exports","value","react_1","__webpack_require__","useInView","_a","state","target","_b","root","_c","rootMargin","_d","threshold","_e","onEnter","_f","onLeave","_g","unobserveOnEnter","callback","observer","entry","isIntersecting","current","unobserve","useEffect","IntersectionObserver","observe","slice"],"mappings":"8FACAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAcC,EAAQ,QACtBH,EAAAI,UAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAAE,OAAAC,EAAAH,EAAAI,YAAA,IAAAD,EAAA,KAAAA,EAAAE,EAAAL,EAAAM,kBAAA,IAAAD,EAAA,kBAAAA,EAAAE,EAAAP,EAAAQ,iBAAA,IAAAD,EAAA,EAAAA,EAAAE,EAAAT,EAAAU,eAAA,IAAAD,EAAA,aAAsQA,EAAAE,EAAAX,EAAAY,eAAA,IAAAD,EAAA,aAAiEA,EAAAE,EAAAb,EAAAc,wBAAA,IAAAD,KACvUE,EAAA,SAAAf,EAAAgB,GACA,IAAAC,EAAAjB,EAAA,GACAiB,EAAAC,gBACAR,EAAAO,EAAAD,GACAd,EAAAiB,SAAAL,GACAE,EAAAI,UAAAlB,EAAAiB,UAGAP,EAAAK,EAAAD,IAGAnB,EAAAwB,UAAA,WACA,IAAAL,EAAA,IAAAM,qBAAAP,EAAA,CACAX,OACAE,aACAE,cAIA,OAFAN,EAAAiB,SACAH,EAAAO,QAAArB,EAAAiB,SACA,WACA,GAAAjB,EAAAiB,QACA,OAAAH,EAAAI,UAAAlB,EAAAiB,WAGKlB,IAAAuB,QAAA","file":"npm.react-hook-inview.098350313597f2c1453d.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nexports.useInView = function (_a, state) {\n    var target = _a.target, _b = _a.root, root = _b === void 0 ? null : _b, _c = _a.rootMargin, rootMargin = _c === void 0 ? '0px 0px 0px 0px' : _c, _d = _a.threshold, threshold = _d === void 0 ? 0 : _d, _e = _a.onEnter, onEnter = _e === void 0 ? function () { } : _e, _f = _a.onLeave, onLeave = _f === void 0 ? function () { } : _f, _g = _a.unobserveOnEnter, unobserveOnEnter = _g === void 0 ? false : _g;\n    var callback = function (_a, observer) {\n        var entry = _a[0];\n        if (entry.isIntersecting) {\n            onEnter(entry, observer);\n            if (target.current && unobserveOnEnter)\n                observer.unobserve(target.current);\n        }\n        else {\n            onLeave(entry, observer);\n        }\n    };\n    react_1.useEffect(function () {\n        var observer = new IntersectionObserver(callback, {\n            root: root,\n            rootMargin: rootMargin,\n            threshold: threshold,\n        });\n        if (target.current)\n            observer.observe(target.current);\n        return function () {\n            if (target.current) {\n                return observer.unobserve(target.current);\n            }\n        };\n    }, state ? state.slice() : []);\n};\n"],"sourceRoot":""}